// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DAONFTNFTProposal is an auto generated low-level Go binding around an user-defined struct.
type DAONFTNFTProposal struct {
	TokenURI string
	Proposer common.Address
	Votes    *big.Int
	Minted   bool
}

// MycontractMetaData contains all meta data concerning the Mycontract contract.
var MycontractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"NFTProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposeNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"}],\"internalType\":\"structDAONFT.NFTProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftProposals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"proposeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"voteForNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b506102038061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80637c9900521461002d575b5f5ffd5b61004760048036038101906100429190610106565b610049565b005b3373ffffffffffffffffffffffffffffffffffffffff167fda502b164eb5cfccfa9f947e0fdc1a0bd060adfef2947810b256321c1a74ca4183836040516100919291906101ab565b60405180910390a25050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f8401126100c6576100c56100a5565b5b8235905067ffffffffffffffff8111156100e3576100e26100a9565b5b6020830191508360018202830111156100ff576100fe6100ad565b5b9250929050565b5f5f6020838503121561011c5761011b61009d565b5b5f83013567ffffffffffffffff811115610139576101386100a1565b5b610145858286016100b1565b92509250509250929050565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f61018a8385610151565b9350610197838584610161565b6101a08361016f565b840190509392505050565b5f6020820190508181035f8301526101c481848661017f565b9050939250505056fea264697066735822122059950b98db5febe88e04445a5e0320cdd96df88f3504dc403de40e9e7cbf2ec764736f6c66080604052683635c9adc5dea00000600b5534801561001c575f5ffd5b506040516135da3803806135da833981810160405281019061003e919061017d565b6040518060400160405280600681526020017f44414f4e465400000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f444e465400000000000000000000000000000000000000000000000000000000815250815f90816100b891906103e5565b5080600190816100c891906103e5565b5050508060065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f6007819055505f600a81905550506104b4565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61014c82610123565b9050919050565b61015c81610142565b8114610166575f5ffd5b50565b5f8151905061017781610153565b92915050565b5f602082840312156101925761019161011f565b5b5f61019f84828501610169565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061022357607f821691505b602082108103610236576102356101df565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026102987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261025d565b6102a2868361025d565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6102e66102e16102dc846102ba565b6102c3565b6102ba565b9050919050565b5f819050919050565b6102ff836102cc565b61031361030b826102ed565b848454610269565b825550505050565b5f5f905090565b61032a61031b565b6103358184846102f6565b505050565b5b818110156103585761034d5f82610322565b60018101905061033b565b5050565b601f82111561039d5761036e8161023c565b6103778461024e565b81016020851015610386578190505b61039a6103928561024e565b83018261033a565b50505b505050565b5f82821c905092915050565b5f6103bd5f19846008026103a2565b1980831691505092915050565b5f6103d583836103ae565b9150826002028217905092915050565b6103ee826101a8565b67ffffffffffffffff811115610407576104066101b2565b5b610411825461020c565b61041c82828561035c565b5f60209050601f83116001811461044d575f841561043b578287015190505b61044585826103ca565b8655506104ac565b601f19841661045b8661023c565b5f5b828110156104825784890151825560018201915060208501945060208101905061045d565b8683101561049f578489015161049b601f8916826103ae565b8355505b6001600288020188555050505b505050505050565b613119806104c15f395ff3fe608060405234801561000f575f5ffd5b5060043610610135575f3560e01c80636352211e116100b6578063a22cb4651161007a578063a22cb46514610360578063b88d4fde1461037c578063bd31a4d814610398578063c87b56dd146103b6578063e985e9c5146103e6578063f96dae0a1461041657610135565b80636352211e146102aa57806369aecfd7146102da57806370a08231146102f657806389ba52c41461032657806395d89b411461034257610135565b806323b872dd116100fd57806323b872dd146101f157806342842e0e1461020d578063438596321461022957806354ab958814610259578063555356ab1461028c57610135565b806301ffc9a71461013957806306fdde0314610169578063081812fc14610187578063095ea7b3146101b75780630c0512e9146101d3575b5f5ffd5b610153600480360381019061014e919061201d565b610434565b6040516101609190612062565b60405180910390f35b610171610515565b60405161017e91906120eb565b60405180910390f35b6101a1600480360381019061019c919061213e565b6105a4565b6040516101ae91906121a8565b60405180910390f35b6101d160048036038101906101cc91906121eb565b6105bf565b005b6101db6105d5565b6040516101e89190612238565b60405180910390f35b61020b60048036038101906102069190612251565b6105db565b005b61022760048036038101906102229190612251565b6106da565b005b610243600480360381019061023e91906122a1565b6106f9565b6040516102509190612062565b60405180910390f35b610273600480360381019061026e919061213e565b610723565b60405161028394939291906122df565b60405180910390f35b610294610800565b6040516102a191906124b9565b60405180910390f35b6102c460048036038101906102bf919061213e565b610a40565b6040516102d191906121a8565b60405180910390f35b6102f460048036038101906102ef9190612605565b610a51565b005b610310600480360381019061030b919061264c565b610b79565b60405161031d9190612238565b60405180910390f35b610340600480360381019061033b919061213e565b610c2f565b005b61034a610f61565b60405161035791906120eb565b60405180910390f35b61037a600480360381019061037591906126a1565b610ff1565b005b6103966004803603810190610391919061277d565b611007565b005b6103a061102c565b6040516103ad9190612238565b60405180910390f35b6103d060048036038101906103cb919061213e565b611032565b6040516103dd91906120eb565b60405180910390f35b61040060048036038101906103fb91906127fd565b611098565b60405161040d9190612062565b60405180910390f35b61041e611126565b60405161042b9190612896565b60405180910390f35b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104fe57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061050e575061050d8261114b565b5b9050919050565b60605f8054610523906128dc565b80601f016020809104026020016040519081016040528092919081815260200182805461054f906128dc565b801561059a5780601f106105715761010080835404028352916020019161059a565b820191905f5260205f20905b81548152906001019060200180831161057d57829003601f168201915b5050505050905090565b5f6105ae826111b4565b506105b88261123a565b9050919050565b6105d182826105cc611273565b61127a565b5050565b600a5481565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361064b575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161064291906121a8565b60405180910390fd5b5f61065e8383610659611273565b61128c565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106d4578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016106cb9392919061290c565b60405180910390fd5b50505050565b6106f483838360405180602001604052805f815250611007565b505050565b6009602052815f5260405f20602052805f5260405f205f915091509054906101000a900460ff1681565b6008602052805f5260405f205f91509050805f018054610742906128dc565b80601f016020809104026020016040519081016040528092919081815260200182805461076e906128dc565b80156107b95780601f10610790576101008083540402835291602001916107b9565b820191905f5260205f20905b81548152906001019060200180831161079c57829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002015490806003015f9054906101000a900460ff16905084565b60605f600a5467ffffffffffffffff81111561081f5761081e6124e1565b5b60405190808252806020026020018201604052801561085857816020015b610845611f7a565b81526020019060019003908161083d5790505b5090505f5f90505b600a54811015610a38575f73ffffffffffffffffffffffffffffffffffffffff1660085f600184610891919061296e565b81526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a2b5760085f6001836108ec919061296e565b81526020019081526020015f206040518060800160405290815f82018054610913906128dc565b80601f016020809104026020016040519081016040528092919081815260200182805461093f906128dc565b801561098a5780601f106109615761010080835404028352916020019161098a565b820191905f5260205f20905b81548152906001019060200180831161096d57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff161515151581525050828281518110610a1f57610a1e6129a1565b5b60200260200101819052505b8080600101915050610860565b508091505090565b5f610a4a826111b4565b9050919050565b600a5f815480929190610a63906129ce565b919050555060405180608001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f151581525060085f600a5481526020019081526020015f205f820151815f019081610ac79190612bac565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908315150217905550905050600a547f66fde1e5134898d49de0f081d598cf7d8fba2432595667ac3cbef6dd60dc01158233604051610b6e929190612c7b565b60405180910390a250565b5f5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bea575f6040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610be191906121a8565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f73ffffffffffffffffffffffffffffffffffffffff1660085f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc790612cf3565b60405180910390fd5b60095f8281526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610d69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6090612d5b565b60405180910390fd5b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610dc491906121a8565b602060405180830381865afa158015610ddf573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e039190612d8d565b90505f8111610e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3e90612e02565b60405180910390fd5b8060085f8481526020019081526020015f206002015f828254610e6a919061296e565b92505081905550600160095f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16827f909b43dcc56d91024768bbc5c8d56441234580b2fd6176844960cbc7218cc0b560085f8681526020019081526020015f205f01604051610f2e9190612ea1565b60405180910390a3600b5460085f8481526020019081526020015f206002015410610f5d57610f5c82611497565b5b5050565b606060018054610f70906128dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9c906128dc565b8015610fe75780601f10610fbe57610100808354040283529160200191610fe7565b820191905f5260205f20905b815481529060010190602001808311610fca57829003601f168201915b5050505050905090565b611003610ffc611273565b83836115c6565b5050565b6110128484846105db565b61102661101d611273565b8585858561172f565b50505050565b600b5481565b606061103d826111b4565b505f6110476118db565b90505f8151116110655760405180602001604052805f815250611090565b8061106f846118f1565b604051602001611080929190612efb565b6040516020818303038152906040525b915050919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f5f6111bf836119bb565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361123157826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016112289190612238565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b61128783838360016119f4565b505050565b5f5f611297846119bb565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112d8576112d7818486611bb3565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611363576113175f855f5f6119f4565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146113e257600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b5f60085f8381526020019081526020015f209050806003015f9054906101000a900460ff16156114fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f390612f68565b60405180910390fd5b60075f81548092919061150e906129ce565b91905055505f6007549050611546826001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611c76565b6001826003015f6101000a81548160ff021916908315150217905550807f411b345259a1495602cee098e5f501eb3412e0701c10b173ecd8ba7b585974a9835f01846001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516115b9929190612f86565b60405180910390a2505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361163657816040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161162d91906121a8565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117229190612062565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b11156118d4578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b815260040161178d9493929190613006565b6020604051808303815f875af19250505080156117c857506040513d601f19601f820116820180604052508101906117c59190613064565b60015b611849573d805f81146117f6576040519150601f19603f3d011682016040523d82523d5f602084013e6117fb565b606091505b505f81510361184157836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161183891906121a8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146118d257836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118c991906121a8565b60405180910390fd5b505b5050505050565b606060405180602001604052805f815250905090565b60605f60016118ff84611d69565b0190505f8167ffffffffffffffff81111561191d5761191c6124e1565b5b6040519080825280601f01601f19166020018201604052801561194f5781602001600182028036833780820191505090505b5090505f82602001820190505b6001156119b0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816119a5576119a461308f565b5b0494505f850361195c575b819350505050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611a2c57505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611b5e575f611a3b846111b4565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611aa557508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611ab85750611ab68184611098565b155b15611afa57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611af191906121a8565b60405180910390fd5b8115611b5c57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611bbe838383611eba565b611c71575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611c3257806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611c299190612238565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611c689291906130bc565b60405180910390fd5b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ce6575f6040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611cdd91906121a8565b60405180910390fd5b5f611cf283835f61128c565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d64575f6040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611d5b91906121a8565b60405180910390fd5b505050565b5f5f5f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611dc5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611dbb57611dba61308f565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611e02576d04ee2d6d415b85acef81000000008381611df857611df761308f565b5b0492506020810190505b662386f26fc100008310611e3157662386f26fc100008381611e2757611e2661308f565b5b0492506010810190505b6305f5e1008310611e5a576305f5e1008381611e5057611e4f61308f565b5b0492506008810190505b6127108310611e7f576127108381611e7557611e7461308f565b5b0492506004810190505b60648310611ea25760648381611e9857611e9761308f565b5b0492506002810190505b600a8310611eb1576001810190505b80915050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611f7157508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f325750611f318484611098565b5b80611f7057508273ffffffffffffffffffffffffffffffffffffffff16611f588361123a565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f151581525090565b5f604051905090565b5f5ffd5b5f5ffd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ffc81611fc8565b8114612006575f5ffd5b50565b5f8135905061201781611ff3565b92915050565b5f6020828403121561203257612031611fc0565b5b5f61203f84828501612009565b91505092915050565b5f8115159050919050565b61205c81612048565b82525050565b5f6020820190506120755f830184612053565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6120bd8261207b565b6120c78185612085565b93506120d7818560208601612095565b6120e0816120a3565b840191505092915050565b5f6020820190508181035f83015261210381846120b3565b905092915050565b5f819050919050565b61211d8161210b565b8114612127575f5ffd5b50565b5f8135905061213881612114565b92915050565b5f6020828403121561215357612152611fc0565b5b5f6121608482850161212a565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61219282612169565b9050919050565b6121a281612188565b82525050565b5f6020820190506121bb5f830184612199565b92915050565b6121ca81612188565b81146121d4575f5ffd5b50565b5f813590506121e5816121c1565b92915050565b5f5f6040838503121561220157612200611fc0565b5b5f61220e858286016121d7565b925050602061221f8582860161212a565b9150509250929050565b6122328161210b565b82525050565b5f60208201905061224b5f830184612229565b92915050565b5f5f5f6060848603121561226857612267611fc0565b5b5f612275868287016121d7565b9350506020612286868287016121d7565b92505060406122978682870161212a565b9150509250925092565b5f5f604083850312156122b7576122b6611fc0565b5b5f6122c48582860161212a565b92505060206122d5858286016121d7565b9150509250929050565b5f6080820190508181035f8301526122f781876120b3565b90506123066020830186612199565b6123136040830185612229565b6123206060830184612053565b95945050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f61236c8261207b565b6123768185612352565b9350612386818560208601612095565b61238f816120a3565b840191505092915050565b6123a381612188565b82525050565b6123b28161210b565b82525050565b6123c181612048565b82525050565b5f608083015f8301518482035f8601526123e18282612362565b91505060208301516123f6602086018261239a565b50604083015161240960408601826123a9565b50606083015161241c60608601826123b8565b508091505092915050565b5f61243283836123c7565b905092915050565b5f602082019050919050565b5f61245082612329565b61245a8185612333565b93508360208202850161246c85612343565b805f5b858110156124a757848403895281516124888582612427565b94506124938361243a565b925060208a0199505060018101905061246f565b50829750879550505050505092915050565b5f6020820190508181035f8301526124d18184612446565b905092915050565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612517826120a3565b810181811067ffffffffffffffff82111715612536576125356124e1565b5b80604052505050565b5f612548611fb7565b9050612554828261250e565b919050565b5f67ffffffffffffffff821115612573576125726124e1565b5b61257c826120a3565b9050602081019050919050565b828183375f83830152505050565b5f6125a96125a484612559565b61253f565b9050828152602081018484840111156125c5576125c46124dd565b5b6125d0848285612589565b509392505050565b5f82601f8301126125ec576125eb6124d9565b5b81356125fc848260208601612597565b91505092915050565b5f6020828403121561261a57612619611fc0565b5b5f82013567ffffffffffffffff81111561263757612636611fc4565b5b612643848285016125d8565b91505092915050565b5f6020828403121561266157612660611fc0565b5b5f61266e848285016121d7565b91505092915050565b61268081612048565b811461268a575f5ffd5b50565b5f8135905061269b81612677565b92915050565b5f5f604083850312156126b7576126b6611fc0565b5b5f6126c4858286016121d7565b92505060206126d58582860161268d565b9150509250929050565b5f67ffffffffffffffff8211156126f9576126f86124e1565b5b612702826120a3565b9050602081019050919050565b5f61272161271c846126df565b61253f565b90508281526020810184848401111561273d5761273c6124dd565b5b612748848285612589565b509392505050565b5f82601f830112612764576127636124d9565b5b813561277484826020860161270f565b91505092915050565b5f5f5f5f6080858703121561279557612794611fc0565b5b5f6127a2878288016121d7565b94505060206127b3878288016121d7565b93505060406127c48782880161212a565b925050606085013567ffffffffffffffff8111156127e5576127e4611fc4565b5b6127f187828801612750565b91505092959194509250565b5f5f6040838503121561281357612812611fc0565b5b5f612820858286016121d7565b9250506020612831858286016121d7565b9150509250929050565b5f819050919050565b5f61285e61285961285484612169565b61283b565b612169565b9050919050565b5f61286f82612844565b9050919050565b5f61288082612865565b9050919050565b61289081612876565b82525050565b5f6020820190506128a95f830184612887565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806128f357607f821691505b602082108103612906576129056128af565b5b50919050565b5f60608201905061291f5f830186612199565b61292c6020830185612229565b6129396040830184612199565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6129788261210b565b91506129838361210b565b925082820190508082111561299b5761299a612941565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6129d88261210b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a0a57612a09612941565b5b600182019050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612a717fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a36565b612a7b8683612a36565b95508019841693508086168417925050509392505050565b5f612aad612aa8612aa38461210b565b61283b565b61210b565b9050919050565b5f819050919050565b612ac683612a93565b612ada612ad282612ab4565b848454612a42565b825550505050565b5f5f905090565b612af1612ae2565b612afc818484612abd565b505050565b5b81811015612b1f57612b145f82612ae9565b600181019050612b02565b5050565b601f821115612b6457612b3581612a15565b612b3e84612a27565b81016020851015612b4d578190505b612b61612b5985612a27565b830182612b01565b50505b505050565b5f82821c905092915050565b5f612b845f1984600802612b69565b1980831691505092915050565b5f612b9c8383612b75565b9150826002028217905092915050565b612bb58261207b565b67ffffffffffffffff811115612bce57612bcd6124e1565b5b612bd882546128dc565b612be3828285612b23565b5f60209050601f831160018114612c14575f8415612c02578287015190505b612c0c8582612b91565b865550612c73565b601f198416612c2286612a15565b5f5b82811015612c4957848901518255600182019150602085019450602081019050612c24565b86831015612c665784890151612c62601f891682612b75565b8355505b6001600288020188555050505b505050505050565b5f6040820190508181035f830152612c9381856120b3565b9050612ca26020830184612199565b9392505050565b7f50726f706f73616c20646f6573206e6f742065786973740000000000000000005f82015250565b5f612cdd601783612085565b9150612ce882612ca9565b602082019050919050565b5f6020820190508181035f830152612d0a81612cd1565b9050919050565b7f416c726561647920766f746564000000000000000000000000000000000000005f82015250565b5f612d45600d83612085565b9150612d5082612d11565b602082019050919050565b5f6020820190508181035f830152612d7281612d39565b9050919050565b5f81519050612d8781612114565b92915050565b5f60208284031215612da257612da1611fc0565b5b5f612daf84828501612d79565b91505092915050565b7f4e6f20676f7665726e616e636520746f6b656e730000000000000000000000005f82015250565b5f612dec601483612085565b9150612df782612db8565b602082019050919050565b5f6020820190508181035f830152612e1981612de0565b9050919050565b5f8154612e2c816128dc565b612e368186612085565b9450600182165f8114612e505760018114612e6657612e98565b60ff198316865281151560200286019350612e98565b612e6f85612a15565b5f5b83811015612e9057815481890152600182019150602081019050612e71565b808801955050505b50505092915050565b5f6020820190508181035f830152612eb98184612e20565b905092915050565b5f81905092915050565b5f612ed58261207b565b612edf8185612ec1565b9350612eef818560208601612095565b80840191505092915050565b5f612f068285612ecb565b9150612f128284612ecb565b91508190509392505050565b7f416c7265616479206d696e7465640000000000000000000000000000000000005f82015250565b5f612f52600e83612085565b9150612f5d82612f1e565b602082019050919050565b5f6020820190508181035f830152612f7f81612f46565b9050919050565b5f6040820190508181035f830152612f9e8185612e20565b9050612fad6020830184612199565b9392505050565b5f81519050919050565b5f82825260208201905092915050565b5f612fd882612fb4565b612fe28185612fbe565b9350612ff2818560208601612095565b612ffb816120a3565b840191505092915050565b5f6080820190506130195f830187612199565b6130266020830186612199565b6130336040830185612229565b81810360608301526130458184612fce565b905095945050505050565b5f8151905061305e81611ff3565b92915050565b5f6020828403121561307957613078611fc0565b5b5f61308684828501613050565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6040820190506130cf5f830185612199565b6130dc6020830184612229565b939250505056fea26469706673582212202eb908fc0ea6bff1a59eaab99e23961222a3dc09e844f2f262305db4bbcc365764736f6c634300081d003334300081d0033",
}

// MycontractABI is the input ABI used to generate the binding from.
// Deprecated: Use MycontractMetaData.ABI instead.
var MycontractABI = MycontractMetaData.ABI

// MycontractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MycontractMetaData.Bin instead.
var MycontractBin = MycontractMetaData.Bin

// DeployMycontract deploys a new Ethereum contract, binding an instance of Mycontract to it.
func DeployMycontract(auth *bind.TransactOpts, backend bind.ContractBackend, _governanceToken common.Address) (common.Address, *types.Transaction, *Mycontract, error) {
	parsed, err := MycontractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MycontractBin), backend, _governanceToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Mycontract{MycontractCaller: MycontractCaller{contract: contract}, MycontractTransactor: MycontractTransactor{contract: contract}, MycontractFilterer: MycontractFilterer{contract: contract}}, nil
}

// Mycontract is an auto generated Go binding around an Ethereum contract.
type Mycontract struct {
	MycontractCaller     // Read-only binding to the contract
	MycontractTransactor // Write-only binding to the contract
	MycontractFilterer   // Log filterer for contract events
}

// MycontractCaller is an auto generated read-only Go binding around an Ethereum contract.
type MycontractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MycontractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MycontractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MycontractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MycontractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MycontractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MycontractSession struct {
	Contract     *Mycontract       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MycontractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MycontractCallerSession struct {
	Contract *MycontractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MycontractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MycontractTransactorSession struct {
	Contract     *MycontractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MycontractRaw is an auto generated low-level Go binding around an Ethereum contract.
type MycontractRaw struct {
	Contract *Mycontract // Generic contract binding to access the raw methods on
}

// MycontractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MycontractCallerRaw struct {
	Contract *MycontractCaller // Generic read-only contract binding to access the raw methods on
}

// MycontractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MycontractTransactorRaw struct {
	Contract *MycontractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMycontract creates a new instance of Mycontract, bound to a specific deployed contract.
func NewMycontract(address common.Address, backend bind.ContractBackend) (*Mycontract, error) {
	contract, err := bindMycontract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Mycontract{MycontractCaller: MycontractCaller{contract: contract}, MycontractTransactor: MycontractTransactor{contract: contract}, MycontractFilterer: MycontractFilterer{contract: contract}}, nil
}

// NewMycontractCaller creates a new read-only instance of Mycontract, bound to a specific deployed contract.
func NewMycontractCaller(address common.Address, caller bind.ContractCaller) (*MycontractCaller, error) {
	contract, err := bindMycontract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MycontractCaller{contract: contract}, nil
}

// NewMycontractTransactor creates a new write-only instance of Mycontract, bound to a specific deployed contract.
func NewMycontractTransactor(address common.Address, transactor bind.ContractTransactor) (*MycontractTransactor, error) {
	contract, err := bindMycontract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MycontractTransactor{contract: contract}, nil
}

// NewMycontractFilterer creates a new log filterer instance of Mycontract, bound to a specific deployed contract.
func NewMycontractFilterer(address common.Address, filterer bind.ContractFilterer) (*MycontractFilterer, error) {
	contract, err := bindMycontract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MycontractFilterer{contract: contract}, nil
}

// bindMycontract binds a generic wrapper to an already deployed contract.
func bindMycontract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MycontractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mycontract *MycontractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mycontract.Contract.MycontractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mycontract *MycontractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mycontract.Contract.MycontractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mycontract *MycontractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mycontract.Contract.MycontractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mycontract *MycontractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mycontract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mycontract *MycontractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mycontract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mycontract *MycontractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mycontract.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Mycontract *MycontractCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Mycontract *MycontractSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Mycontract.Contract.BalanceOf(&_Mycontract.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Mycontract *MycontractCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Mycontract.Contract.BalanceOf(&_Mycontract.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Mycontract *MycontractCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Mycontract *MycontractSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Mycontract.Contract.GetApproved(&_Mycontract.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Mycontract *MycontractCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Mycontract.Contract.GetApproved(&_Mycontract.CallOpts, tokenId)
}

// GetProposeNFT is a free data retrieval call binding the contract method 0x555356ab.
//
// Solidity: function getProposeNFT() view returns((string,address,uint256,bool)[])
func (_Mycontract *MycontractCaller) GetProposeNFT(opts *bind.CallOpts) ([]DAONFTNFTProposal, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "getProposeNFT")

	if err != nil {
		return *new([]DAONFTNFTProposal), err
	}

	out0 := *abi.ConvertType(out[0], new([]DAONFTNFTProposal)).(*[]DAONFTNFTProposal)

	return out0, err

}

// GetProposeNFT is a free data retrieval call binding the contract method 0x555356ab.
//
// Solidity: function getProposeNFT() view returns((string,address,uint256,bool)[])
func (_Mycontract *MycontractSession) GetProposeNFT() ([]DAONFTNFTProposal, error) {
	return _Mycontract.Contract.GetProposeNFT(&_Mycontract.CallOpts)
}

// GetProposeNFT is a free data retrieval call binding the contract method 0x555356ab.
//
// Solidity: function getProposeNFT() view returns((string,address,uint256,bool)[])
func (_Mycontract *MycontractCallerSession) GetProposeNFT() ([]DAONFTNFTProposal, error) {
	return _Mycontract.Contract.GetProposeNFT(&_Mycontract.CallOpts)
}

// GovernanceToken is a free data retrieval call binding the contract method 0xf96dae0a.
//
// Solidity: function governanceToken() view returns(address)
func (_Mycontract *MycontractCaller) GovernanceToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "governanceToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GovernanceToken is a free data retrieval call binding the contract method 0xf96dae0a.
//
// Solidity: function governanceToken() view returns(address)
func (_Mycontract *MycontractSession) GovernanceToken() (common.Address, error) {
	return _Mycontract.Contract.GovernanceToken(&_Mycontract.CallOpts)
}

// GovernanceToken is a free data retrieval call binding the contract method 0xf96dae0a.
//
// Solidity: function governanceToken() view returns(address)
func (_Mycontract *MycontractCallerSession) GovernanceToken() (common.Address, error) {
	return _Mycontract.Contract.GovernanceToken(&_Mycontract.CallOpts)
}

// HasVoted is a free data retrieval call binding the contract method 0x43859632.
//
// Solidity: function hasVoted(uint256 , address ) view returns(bool)
func (_Mycontract *MycontractCaller) HasVoted(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "hasVoted", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasVoted is a free data retrieval call binding the contract method 0x43859632.
//
// Solidity: function hasVoted(uint256 , address ) view returns(bool)
func (_Mycontract *MycontractSession) HasVoted(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Mycontract.Contract.HasVoted(&_Mycontract.CallOpts, arg0, arg1)
}

// HasVoted is a free data retrieval call binding the contract method 0x43859632.
//
// Solidity: function hasVoted(uint256 , address ) view returns(bool)
func (_Mycontract *MycontractCallerSession) HasVoted(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _Mycontract.Contract.HasVoted(&_Mycontract.CallOpts, arg0, arg1)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Mycontract *MycontractCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Mycontract *MycontractSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Mycontract.Contract.IsApprovedForAll(&_Mycontract.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Mycontract *MycontractCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Mycontract.Contract.IsApprovedForAll(&_Mycontract.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Mycontract *MycontractCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Mycontract *MycontractSession) Name() (string, error) {
	return _Mycontract.Contract.Name(&_Mycontract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Mycontract *MycontractCallerSession) Name() (string, error) {
	return _Mycontract.Contract.Name(&_Mycontract.CallOpts)
}

// NftProposals is a free data retrieval call binding the contract method 0x54ab9588.
//
// Solidity: function nftProposals(uint256 ) view returns(string tokenURI, address proposer, uint256 votes, bool minted)
func (_Mycontract *MycontractCaller) NftProposals(opts *bind.CallOpts, arg0 *big.Int) (struct {
	TokenURI string
	Proposer common.Address
	Votes    *big.Int
	Minted   bool
}, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "nftProposals", arg0)

	outstruct := new(struct {
		TokenURI string
		Proposer common.Address
		Votes    *big.Int
		Minted   bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TokenURI = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Proposer = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Votes = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Minted = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// NftProposals is a free data retrieval call binding the contract method 0x54ab9588.
//
// Solidity: function nftProposals(uint256 ) view returns(string tokenURI, address proposer, uint256 votes, bool minted)
func (_Mycontract *MycontractSession) NftProposals(arg0 *big.Int) (struct {
	TokenURI string
	Proposer common.Address
	Votes    *big.Int
	Minted   bool
}, error) {
	return _Mycontract.Contract.NftProposals(&_Mycontract.CallOpts, arg0)
}

// NftProposals is a free data retrieval call binding the contract method 0x54ab9588.
//
// Solidity: function nftProposals(uint256 ) view returns(string tokenURI, address proposer, uint256 votes, bool minted)
func (_Mycontract *MycontractCallerSession) NftProposals(arg0 *big.Int) (struct {
	TokenURI string
	Proposer common.Address
	Votes    *big.Int
	Minted   bool
}, error) {
	return _Mycontract.Contract.NftProposals(&_Mycontract.CallOpts, arg0)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Mycontract *MycontractCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Mycontract *MycontractSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Mycontract.Contract.OwnerOf(&_Mycontract.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Mycontract *MycontractCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Mycontract.Contract.OwnerOf(&_Mycontract.CallOpts, tokenId)
}

// ProposalCounter is a free data retrieval call binding the contract method 0x0c0512e9.
//
// Solidity: function proposalCounter() view returns(uint256)
func (_Mycontract *MycontractCaller) ProposalCounter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "proposalCounter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProposalCounter is a free data retrieval call binding the contract method 0x0c0512e9.
//
// Solidity: function proposalCounter() view returns(uint256)
func (_Mycontract *MycontractSession) ProposalCounter() (*big.Int, error) {
	return _Mycontract.Contract.ProposalCounter(&_Mycontract.CallOpts)
}

// ProposalCounter is a free data retrieval call binding the contract method 0x0c0512e9.
//
// Solidity: function proposalCounter() view returns(uint256)
func (_Mycontract *MycontractCallerSession) ProposalCounter() (*big.Int, error) {
	return _Mycontract.Contract.ProposalCounter(&_Mycontract.CallOpts)
}

// RequiredVotes is a free data retrieval call binding the contract method 0xbd31a4d8.
//
// Solidity: function requiredVotes() view returns(uint256)
func (_Mycontract *MycontractCaller) RequiredVotes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "requiredVotes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredVotes is a free data retrieval call binding the contract method 0xbd31a4d8.
//
// Solidity: function requiredVotes() view returns(uint256)
func (_Mycontract *MycontractSession) RequiredVotes() (*big.Int, error) {
	return _Mycontract.Contract.RequiredVotes(&_Mycontract.CallOpts)
}

// RequiredVotes is a free data retrieval call binding the contract method 0xbd31a4d8.
//
// Solidity: function requiredVotes() view returns(uint256)
func (_Mycontract *MycontractCallerSession) RequiredVotes() (*big.Int, error) {
	return _Mycontract.Contract.RequiredVotes(&_Mycontract.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Mycontract *MycontractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Mycontract *MycontractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Mycontract.Contract.SupportsInterface(&_Mycontract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Mycontract *MycontractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Mycontract.Contract.SupportsInterface(&_Mycontract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Mycontract *MycontractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Mycontract *MycontractSession) Symbol() (string, error) {
	return _Mycontract.Contract.Symbol(&_Mycontract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Mycontract *MycontractCallerSession) Symbol() (string, error) {
	return _Mycontract.Contract.Symbol(&_Mycontract.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Mycontract *MycontractCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Mycontract.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Mycontract *MycontractSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Mycontract.Contract.TokenURI(&_Mycontract.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Mycontract *MycontractCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Mycontract.Contract.TokenURI(&_Mycontract.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Mycontract *MycontractTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mycontract.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Mycontract *MycontractSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mycontract.Contract.Approve(&_Mycontract.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Mycontract *MycontractTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mycontract.Contract.Approve(&_Mycontract.TransactOpts, to, tokenId)
}

// ProposeNFT is a paid mutator transaction binding the contract method 0x69aecfd7.
//
// Solidity: function proposeNFT(string _tokenURI) returns()
func (_Mycontract *MycontractTransactor) ProposeNFT(opts *bind.TransactOpts, _tokenURI string) (*types.Transaction, error) {
	return _Mycontract.contract.Transact(opts, "proposeNFT", _tokenURI)
}

// ProposeNFT is a paid mutator transaction binding the contract method 0x69aecfd7.
//
// Solidity: function proposeNFT(string _tokenURI) returns()
func (_Mycontract *MycontractSession) ProposeNFT(_tokenURI string) (*types.Transaction, error) {
	return _Mycontract.Contract.ProposeNFT(&_Mycontract.TransactOpts, _tokenURI)
}

// ProposeNFT is a paid mutator transaction binding the contract method 0x69aecfd7.
//
// Solidity: function proposeNFT(string _tokenURI) returns()
func (_Mycontract *MycontractTransactorSession) ProposeNFT(_tokenURI string) (*types.Transaction, error) {
	return _Mycontract.Contract.ProposeNFT(&_Mycontract.TransactOpts, _tokenURI)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Mycontract *MycontractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mycontract.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Mycontract *MycontractSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mycontract.Contract.SafeTransferFrom(&_Mycontract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Mycontract *MycontractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mycontract.Contract.SafeTransferFrom(&_Mycontract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Mycontract *MycontractTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Mycontract.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Mycontract *MycontractSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Mycontract.Contract.SafeTransferFrom0(&_Mycontract.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Mycontract *MycontractTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Mycontract.Contract.SafeTransferFrom0(&_Mycontract.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Mycontract *MycontractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Mycontract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Mycontract *MycontractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Mycontract.Contract.SetApprovalForAll(&_Mycontract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Mycontract *MycontractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Mycontract.Contract.SetApprovalForAll(&_Mycontract.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Mycontract *MycontractTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mycontract.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Mycontract *MycontractSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mycontract.Contract.TransferFrom(&_Mycontract.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Mycontract *MycontractTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Mycontract.Contract.TransferFrom(&_Mycontract.TransactOpts, from, to, tokenId)
}

// VoteForNFT is a paid mutator transaction binding the contract method 0x89ba52c4.
//
// Solidity: function voteForNFT(uint256 proposalId) returns()
func (_Mycontract *MycontractTransactor) VoteForNFT(opts *bind.TransactOpts, proposalId *big.Int) (*types.Transaction, error) {
	return _Mycontract.contract.Transact(opts, "voteForNFT", proposalId)
}

// VoteForNFT is a paid mutator transaction binding the contract method 0x89ba52c4.
//
// Solidity: function voteForNFT(uint256 proposalId) returns()
func (_Mycontract *MycontractSession) VoteForNFT(proposalId *big.Int) (*types.Transaction, error) {
	return _Mycontract.Contract.VoteForNFT(&_Mycontract.TransactOpts, proposalId)
}

// VoteForNFT is a paid mutator transaction binding the contract method 0x89ba52c4.
//
// Solidity: function voteForNFT(uint256 proposalId) returns()
func (_Mycontract *MycontractTransactorSession) VoteForNFT(proposalId *big.Int) (*types.Transaction, error) {
	return _Mycontract.Contract.VoteForNFT(&_Mycontract.TransactOpts, proposalId)
}

// MycontractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Mycontract contract.
type MycontractApprovalIterator struct {
	Event *MycontractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MycontractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MycontractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MycontractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MycontractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MycontractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MycontractApproval represents a Approval event raised by the Mycontract contract.
type MycontractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Mycontract *MycontractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*MycontractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mycontract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MycontractApprovalIterator{contract: _Mycontract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Mycontract *MycontractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MycontractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mycontract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MycontractApproval)
				if err := _Mycontract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Mycontract *MycontractFilterer) ParseApproval(log types.Log) (*MycontractApproval, error) {
	event := new(MycontractApproval)
	if err := _Mycontract.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MycontractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Mycontract contract.
type MycontractApprovalForAllIterator struct {
	Event *MycontractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MycontractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MycontractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MycontractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MycontractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MycontractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MycontractApprovalForAll represents a ApprovalForAll event raised by the Mycontract contract.
type MycontractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Mycontract *MycontractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*MycontractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Mycontract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &MycontractApprovalForAllIterator{contract: _Mycontract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Mycontract *MycontractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *MycontractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Mycontract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MycontractApprovalForAll)
				if err := _Mycontract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Mycontract *MycontractFilterer) ParseApprovalForAll(log types.Log) (*MycontractApprovalForAll, error) {
	event := new(MycontractApprovalForAll)
	if err := _Mycontract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MycontractNFTMintedIterator is returned from FilterNFTMinted and is used to iterate over the raw logs and unpacked data for NFTMinted events raised by the Mycontract contract.
type MycontractNFTMintedIterator struct {
	Event *MycontractNFTMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MycontractNFTMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MycontractNFTMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MycontractNFTMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MycontractNFTMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MycontractNFTMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MycontractNFTMinted represents a NFTMinted event raised by the Mycontract contract.
type MycontractNFTMinted struct {
	TokenId  *big.Int
	TokenURI string
	Owner    common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNFTMinted is a free log retrieval operation binding the contract event 0x411b345259a1495602cee098e5f501eb3412e0701c10b173ecd8ba7b585974a9.
//
// Solidity: event NFTMinted(uint256 indexed tokenId, string tokenURI, address owner)
func (_Mycontract *MycontractFilterer) FilterNFTMinted(opts *bind.FilterOpts, tokenId []*big.Int) (*MycontractNFTMintedIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mycontract.contract.FilterLogs(opts, "NFTMinted", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MycontractNFTMintedIterator{contract: _Mycontract.contract, event: "NFTMinted", logs: logs, sub: sub}, nil
}

// WatchNFTMinted is a free log subscription operation binding the contract event 0x411b345259a1495602cee098e5f501eb3412e0701c10b173ecd8ba7b585974a9.
//
// Solidity: event NFTMinted(uint256 indexed tokenId, string tokenURI, address owner)
func (_Mycontract *MycontractFilterer) WatchNFTMinted(opts *bind.WatchOpts, sink chan<- *MycontractNFTMinted, tokenId []*big.Int) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mycontract.contract.WatchLogs(opts, "NFTMinted", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MycontractNFTMinted)
				if err := _Mycontract.contract.UnpackLog(event, "NFTMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNFTMinted is a log parse operation binding the contract event 0x411b345259a1495602cee098e5f501eb3412e0701c10b173ecd8ba7b585974a9.
//
// Solidity: event NFTMinted(uint256 indexed tokenId, string tokenURI, address owner)
func (_Mycontract *MycontractFilterer) ParseNFTMinted(log types.Log) (*MycontractNFTMinted, error) {
	event := new(MycontractNFTMinted)
	if err := _Mycontract.contract.UnpackLog(event, "NFTMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MycontractNFTProposedIterator is returned from FilterNFTProposed and is used to iterate over the raw logs and unpacked data for NFTProposed events raised by the Mycontract contract.
type MycontractNFTProposedIterator struct {
	Event *MycontractNFTProposed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MycontractNFTProposedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MycontractNFTProposed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MycontractNFTProposed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MycontractNFTProposedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MycontractNFTProposedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MycontractNFTProposed represents a NFTProposed event raised by the Mycontract contract.
type MycontractNFTProposed struct {
	ProposalId *big.Int
	TokenURI   string
	Proposer   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNFTProposed is a free log retrieval operation binding the contract event 0x66fde1e5134898d49de0f081d598cf7d8fba2432595667ac3cbef6dd60dc0115.
//
// Solidity: event NFTProposed(uint256 indexed proposalId, string tokenURI, address proposer)
func (_Mycontract *MycontractFilterer) FilterNFTProposed(opts *bind.FilterOpts, proposalId []*big.Int) (*MycontractNFTProposedIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Mycontract.contract.FilterLogs(opts, "NFTProposed", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return &MycontractNFTProposedIterator{contract: _Mycontract.contract, event: "NFTProposed", logs: logs, sub: sub}, nil
}

// WatchNFTProposed is a free log subscription operation binding the contract event 0x66fde1e5134898d49de0f081d598cf7d8fba2432595667ac3cbef6dd60dc0115.
//
// Solidity: event NFTProposed(uint256 indexed proposalId, string tokenURI, address proposer)
func (_Mycontract *MycontractFilterer) WatchNFTProposed(opts *bind.WatchOpts, sink chan<- *MycontractNFTProposed, proposalId []*big.Int) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}

	logs, sub, err := _Mycontract.contract.WatchLogs(opts, "NFTProposed", proposalIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MycontractNFTProposed)
				if err := _Mycontract.contract.UnpackLog(event, "NFTProposed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNFTProposed is a log parse operation binding the contract event 0x66fde1e5134898d49de0f081d598cf7d8fba2432595667ac3cbef6dd60dc0115.
//
// Solidity: event NFTProposed(uint256 indexed proposalId, string tokenURI, address proposer)
func (_Mycontract *MycontractFilterer) ParseNFTProposed(log types.Log) (*MycontractNFTProposed, error) {
	event := new(MycontractNFTProposed)
	if err := _Mycontract.contract.UnpackLog(event, "NFTProposed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MycontractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Mycontract contract.
type MycontractTransferIterator struct {
	Event *MycontractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MycontractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MycontractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MycontractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MycontractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MycontractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MycontractTransfer represents a Transfer event raised by the Mycontract contract.
type MycontractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Mycontract *MycontractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*MycontractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mycontract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MycontractTransferIterator{contract: _Mycontract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Mycontract *MycontractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MycontractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Mycontract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MycontractTransfer)
				if err := _Mycontract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Mycontract *MycontractFilterer) ParseTransfer(log types.Log) (*MycontractTransfer, error) {
	event := new(MycontractTransfer)
	if err := _Mycontract.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MycontractVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the Mycontract contract.
type MycontractVotedIterator struct {
	Event *MycontractVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MycontractVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MycontractVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MycontractVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MycontractVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MycontractVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MycontractVoted represents a Voted event raised by the Mycontract contract.
type MycontractVoted struct {
	ProposalId *big.Int
	Voter      common.Address
	TokenURI   string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVoted is a free log retrieval operation binding the contract event 0x909b43dcc56d91024768bbc5c8d56441234580b2fd6176844960cbc7218cc0b5.
//
// Solidity: event Voted(uint256 indexed proposalId, address indexed voter, string tokenURI)
func (_Mycontract *MycontractFilterer) FilterVoted(opts *bind.FilterOpts, proposalId []*big.Int, voter []common.Address) (*MycontractVotedIterator, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _Mycontract.contract.FilterLogs(opts, "Voted", proposalIdRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &MycontractVotedIterator{contract: _Mycontract.contract, event: "Voted", logs: logs, sub: sub}, nil
}

// WatchVoted is a free log subscription operation binding the contract event 0x909b43dcc56d91024768bbc5c8d56441234580b2fd6176844960cbc7218cc0b5.
//
// Solidity: event Voted(uint256 indexed proposalId, address indexed voter, string tokenURI)
func (_Mycontract *MycontractFilterer) WatchVoted(opts *bind.WatchOpts, sink chan<- *MycontractVoted, proposalId []*big.Int, voter []common.Address) (event.Subscription, error) {

	var proposalIdRule []interface{}
	for _, proposalIdItem := range proposalId {
		proposalIdRule = append(proposalIdRule, proposalIdItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _Mycontract.contract.WatchLogs(opts, "Voted", proposalIdRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MycontractVoted)
				if err := _Mycontract.contract.UnpackLog(event, "Voted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoted is a log parse operation binding the contract event 0x909b43dcc56d91024768bbc5c8d56441234580b2fd6176844960cbc7218cc0b5.
//
// Solidity: event Voted(uint256 indexed proposalId, address indexed voter, string tokenURI)
func (_Mycontract *MycontractFilterer) ParseVoted(log types.Log) (*MycontractVoted, error) {
	event := new(MycontractVoted)
	if err := _Mycontract.contract.UnpackLog(event, "Voted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
